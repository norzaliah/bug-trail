{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  timeout: 10000 // 10 second timeout\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // Handle different HTTP status codes\n    switch (error.response.status) {\n      case 401:\n        // Handle unauthorized access (e.g., redirect to login)\n        break;\n      case 403:\n        // Handle forbidden access\n        break;\n      case 404:\n        // Handle not found errors\n        break;\n      case 500:\n        // Handle server errors\n        break;\n      default:\n      // Handle other errors\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    error.message = 'No response from server. Please check your connection.';\n  } else {\n    // Something happened in setting up the request\n    error.message = 'Request setup error.';\n  }\n  return Promise.reject(error);\n});\n\n// Bug-related API methods\nconst bugService = {\n  getAllBugs: () => api.get('/bugs'),\n  getBugById: id => api.get(`/bugs/${id}`),\n  createBug: bugData => api.post('/bugs', bugData),\n  updateBug: (id, bugData) => api.patch(`/bugs/${id}`, bugData),\n  deleteBug: id => api.delete(`/bugs/${id}`),\n  updateBugStatus: (id, status) => api.patch(`/bugs/${id}/status`, {\n    status\n  })\n};\n\n// User-related API methods\nconst userService = {\n  getCurrentUser: () => api.get('/users/me'),\n  getUsers: () => api.get('/users')\n};\n\n// Export all services\nexport { bugService, userService };\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","message","bugService","getAllBugs","get","getBugById","id","createBug","bugData","post","updateBug","patch","deleteBug","delete","updateBugStatus","userService","getCurrentUser","getUsers"],"sources":["/Users/norzaliah/bug-tracker-code/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response) {\n      // Handle different HTTP status codes\n      switch (error.response.status) {\n        case 401:\n          // Handle unauthorized access (e.g., redirect to login)\n          break;\n        case 403:\n          // Handle forbidden access\n          break;\n        case 404:\n          // Handle not found errors\n          break;\n        case 500:\n          // Handle server errors\n          break;\n        default:\n          // Handle other errors\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      error.message = 'No response from server. Please check your connection.';\n    } else {\n      // Something happened in setting up the request\n      error.message = 'Request setup error.';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Bug-related API methods\nconst bugService = {\n  getAllBugs: () => api.get('/bugs'),\n  getBugById: (id) => api.get(`/bugs/${id}`),\n  createBug: (bugData) => api.post('/bugs', bugData),\n  updateBug: (id, bugData) => api.patch(`/bugs/${id}`, bugData),\n  deleteBug: (id) => api.delete(`/bugs/${id}`),\n  updateBugStatus: (id, status) => api.patch(`/bugs/${id}/status`, { status }),\n};\n\n// User-related API methods\nconst userService = {\n  getCurrentUser: () => api.get('/users/me'),\n  getUsers: () => api.get('/users'),\n};\n\n// Export all services\nexport { bugService, userService };\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGM,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACO,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,QAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACN;QACA;MACF,KAAK,GAAG;QACN;QACA;MACF,KAAK,GAAG;QACN;QACA;MACF,KAAK,GAAG;QACN;QACA;MACF;MACE;IACJ;EACF,CAAC,MAAM,IAAIJ,KAAK,CAACR,OAAO,EAAE;IACxB;IACAQ,KAAK,CAACK,OAAO,GAAG,wDAAwD;EAC1E,CAAC,MAAM;IACL;IACAL,KAAK,CAACK,OAAO,GAAG,sBAAsB;EACxC;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMM,UAAU,GAAG;EACjBC,UAAU,EAAEA,CAAA,KAAMvB,GAAG,CAACwB,GAAG,CAAC,OAAO,CAAC;EAClCC,UAAU,EAAGC,EAAE,IAAK1B,GAAG,CAACwB,GAAG,CAAC,SAASE,EAAE,EAAE,CAAC;EAC1CC,SAAS,EAAGC,OAAO,IAAK5B,GAAG,CAAC6B,IAAI,CAAC,OAAO,EAAED,OAAO,CAAC;EAClDE,SAAS,EAAEA,CAACJ,EAAE,EAAEE,OAAO,KAAK5B,GAAG,CAAC+B,KAAK,CAAC,SAASL,EAAE,EAAE,EAAEE,OAAO,CAAC;EAC7DI,SAAS,EAAGN,EAAE,IAAK1B,GAAG,CAACiC,MAAM,CAAC,SAASP,EAAE,EAAE,CAAC;EAC5CQ,eAAe,EAAEA,CAACR,EAAE,EAAEN,MAAM,KAAKpB,GAAG,CAAC+B,KAAK,CAAC,SAASL,EAAE,SAAS,EAAE;IAAEN;EAAO,CAAC;AAC7E,CAAC;;AAED;AACA,MAAMe,WAAW,GAAG;EAClBC,cAAc,EAAEA,CAAA,KAAMpC,GAAG,CAACwB,GAAG,CAAC,WAAW,CAAC;EAC1Ca,QAAQ,EAAEA,CAAA,KAAMrC,GAAG,CAACwB,GAAG,CAAC,QAAQ;AAClC,CAAC;;AAED;AACA,SAASF,UAAU,EAAEa,WAAW;AAChC,eAAenC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}